<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
  <title>C++: TD 2</title>
  <style type="text/css">
    .blue { color: #0000ff }
    .xslt { color: #116611 }
    .cc { color: #116611 }
    .html { color: #882222 }
    .xml { color: #116611 }
    .red { color: #ff0000 }
    .orange { color: #ff8800 }
    .pink { color: #ff00ff }
    .grey { color: #555555 }
    .hidden { color: #ffffff }
    pre { color: #116611 }
    tt { color: #116611 }
  </style>
  <!-- Google Analytics -->
  <script type="text/javascript" async="" src="http://www.google-analytics.com/ga.js"></script>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-20097933-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
  </script>
  <!-- Syntax highlighting -->
  <link type="text/css" rel="stylesheet" href="../../highlight/styles/googlecode.css">
  <script type="text/javascript" src="../../highlight/highlight.pack.js"></script>
  <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
</head>
<body>
<h2>TD 2: Fonctions, Recursivité, Pointeurs</h2>

<h3>Rappels</h3>
<ul>
  <li>La section <a href="../td1/index.html#Outils">Outils</a> du TD 1 est utile!
  </li>
  <li><a href="../cours">Page du Cours</a></li>
</ul>

<h3>Exercice 1: Fonctions, <tt>#include</tt>, déclarations</h3>

<ol>
  <li><b>Écrire</b> un fichier <tt>1.1.cc</tt> contenant uniquement une fonction <tt>int LaSolution(int x)</tt> qui renvoie toujours x + 42.
    Vérifiez-la avec le fichier <a href="1.1.main.cc"><tt>1.1.main.cc</tt></a> suivant (donc en faisant <tt>g++ 1.1.main.cc &amp;&amp; ./a.out</tt>):
    <pre><code>#include &lt;iostream&gt;
using namespace std;

#include "1.1.cc"

int main() {
  cout &lt;&lt; LaSolution(3) &lt;&lt; endl;
  cout &lt;&lt; LaSolution(-1) &lt;&lt; endl;
}</code></pre>
    <b class="orange">RENDU:</b> <tt>1.1.cc</tt><br/><br/>
  </li>
  <li>
    Copiez <tt>1.1.main.cc</tt> dans <tt>1.2.main.cc</tt> puis <b>modifiez</b> ce dernier en enlevant <tt>#include "1.1.cc"</tt>, et tentez de le compiler manuellement avec g++. Comment faire pour que ça marche?
    <br/>Indices:
    <ul>
      <li>g++ peut prendre plusieurs fichiers en arguments</li>
      <li>Ajoutez une <i>déclaration</i> de la fonction <tt>LaSolution</tt>.</li>
    </ul>
    <br/><b class="orange">RENDUS:</b> <tt>1.2.main.cc</tt> et un fichier <tt>1.2.txt</tt> contenant la ligne de commande pour compiler<br/><br/>
  </li>
</ol>

<h3>Exercice 2: Récursivité (ou pas), <i>stack overflow</i></h3>
On dit qu'une fonction est <i>récursive</i> quand elle s'appelle elle-même.
<ol>
  <li><b>Écrire</b> un fichier <tt>2.1.cc</tt> contenant juste une fonction <tt>FactorielleMod</tt> qui prend un entier <i>n</i> et qui calcule <b><i>n!</i> modulo 1000000007</b>.
    <br/>La fonction devra être <b>récursive</b>: sans utiliser de boucle <tt>for</tt>, <tt>while</tt> ou <tt>do</tt>.
    <br/><b class="red">Attention</b> aux <i>overflow</i>: un entier <tt>int</tt> ne va pas au-dessus de 2<sup>31</sup>-1. Un entier <tt>long</tt> va jusqu'à 2<sup>63</sup>-1 par contre.
    <br/>
    <br/><b>Testez</b>-le et corrigez-le avec ce fichier main.cc, comme avant.
    <br/><b>Note</b>: 100<i>! </i> mod 1000000007 = 437918130.
    <pre><code>#include &lt;iostream&gt;
using namespace std;

#include "2.1.cc"

int main() {
  cout &lt;&lt; "Entrez un entier n: ";
  int n;
  cin &gt;&gt; n;
  cout &lt;&lt; FactorielleMod(n) &lt;&lt; endl;
}</code></pre>
    <b class="orange">RENDU:</b> <tt>2.1.cc</tt><br/><br/>
  </li>
  <li>
    <b>Essayez</b> avec <i>n=</i>10000000 (10 millions). Que voyez-vous?
    <br/>
    <br/>C'est un <i>stack overflow</i>! Pour s'en sortir, deux solutions:
    <ol type="A">
      <li>Augmenter la taille maximum de la pile (<i>stack</i>). Cf <a href="http://stackoverflow.com/questions/2275550/change-stack-size-for-a-c-application-in-linux-during-compilation-with-gnu-com">aide en ligne</a>:
        <ul>
          <li>Ajouter <tt>#include &lt;sys/resource.h&gt;</tt> dans votre main</li>
          <li>Et au début de la fonction <tt>main()</tt>, ajoutez ces lignes:
            <pre><code>struct rlimit r;
getrlimit(RLIMIT_STACK, &amp;r);
r.rlim_cur = 100 &lt;&lt; 20;  // 100 MB.
setrlimit(RLIMIT_STACK, &amp;r);</code></pre>
          </li>
        </ul>
        <b class="red">C'est à éviter</b> en général, sauf cas <b>très</b> rare.
        <br/><br/>
      </li>
      <li>Transformer votre code récursif en code <i>itératif</i>, qui est bien plus dans l'esprit de C++:
        <br/><br/>
        <b>Recodez</b> une autre version <tt>FactorielleMod2(n)</tt> dans un
        nouveau fichier <tt>2.2.cc</tt>, sans récursion mais avec une boucle 
        <tt>for</tt>.
        Vous pouvez le tester avec le <tt>main</tt> d'avant, sans oublier de
        changer le <tt>2.1.cc</tt> en <tt>2.<b>2</b>.cc</tt> et <tt>FactorielleMod</tt>
        en <tt>FactorielleMod<b>2</b></tt>.
        <br/>
        <br/><b class="orange">RENDU:</b> <tt>2.2.cc</tt><br/>
      </li>
    </ol>
    <br/>
  </li>
  <li><b>Optionnel</b> (non compabilisé, à faire en fin de TD): vous pouvez comparer les vitesses de <tt>FactorielleMod()</tt> et <tt>FactorielleMod2()</tt>, par exemple, en calculant la somme de <i>n!</i> pour <i>n</i> allant de 1 à 10000).
    <br/>Que cela donne-t-il?.
    <br/><br/>
  </li>
  <li><b>Écrivez</b> dans un fichier <tt>2.4.cc</tt> une fonction <b>récursive</b> <tt>FiboRec</tt> qui calcule le <i>n</i>-ième terme de la suite de Fibonacci, donnée par:
    <br/><i>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></i> et <i>F<sub>0</sub> = F<sub>1</sub> = 1.</i>
    <br/>Essayez de calculer <tt>FiboRec(60)</tt>. Que se passe-t-il? Pourquoi?
    <br/>
    <br/><b class="orange">RENDU:</b> <tt>2.4.cc</tt><br/><br/>
  </li>
  <li><b>Écrivez</b> dans un fichier <tt>2.5.cc</tt> une fonction <tt>FiboIter</tt> qui calcule <i>F<sub>n</sub></i>, mais itérativement cette fois. Changez sa valeur de retour en <tt>double</tt>.
    <br/>Comparez les valeurs de <tt>FiboIter</tt> et <tt>FiboRec</tt> pour de petits nombres, puis essayez de calculer <tt>FiboIter(60)</tt>, puis <tt>FiboIter(1000)</tt>.
    <br/>
    <br/><b class="orange">RENDU:</b> <tt>2.5.cc</tt><br/><br/>
  </li>
  <li><b>Écrivez</b> dans un fichier <tt>2.6.cc</tt> une fonction <b>récursive</b> <tt>Pgcd</tt> qui calcule le plus grand diviseur commun entre deux <tt>long</tt>.
    <br/>
    <br/><b>Vérifiez</b> que <tt>Pgcd(2250, 1000)</tt> = 250; et essayez <tt>Pgcd(129387194869817412L, 19827398170419240L)</tt> et <tt>Pgcd(1000000007, 1)</tt>. Si ca ne marche pas (ou prend trop de temps), essayez un autre algorithme plus efficace!
    <br/>
    <br/><b class="orange">RENDUS:</b> <tt>2.6.cc</tt> et une brève explication (dans un fichier <tt>2.6.txt</tt>) de pourquoi on a <b>pas</b> le
    problème de <i>stack overflow</i> avec cette fonction<br/><br/>
  </li>
</ol>

<h3>Exercice 3: Pointeurs, tableaux, algorithmes</h3>
<ol>
  <li>Étant donné le fichier <a href="3.1.cc"><tt>3.1.cc</tt></a> suivant:
    <pre><code class="c++">#include &lt;iostream&gt;
using namespace std;

// Ne touchez pas à cette fonction! Utilisez-là telle qu'elle est.
void GetDate(int* year, int* month, int* day) {
  *year = 2018;
  *month = 9;
  *day = 19;
}

int main() {
  // TODO: Utilisez GetDate() pour récuperer la date dans des
  // variables y, m et d de type int.

  // Affichage de la date.
  cout &lt;&lt; y &lt;&lt; "-" &lt;&lt; m &lt;&lt; "-" &lt;&lt; d &lt;&lt; endl;
}</code></pre>
    Téléchargez-le et <b>complétez</b>-le.
    <br/><b>Vérifiez</b> en le compilant et en l'éxecutant: il doit marcher, et afficher <tt>2018-09-19</tt>.
    <br/><span class="grey"><b>Rappel</b>: Pour compiler et éxecuter d'une seule traite: <tt>g++ votre_code.cc &amp;&amp; ./a.out</tt></span>
    <br/>
    <br/><b class="orange">RENDU:</b> <tt>3.1.cc</tt> (complété!)
    <br/><br/>
  </li>
  <li>
    <b>Écrivez</b> un fichier <tt>3.2.cc</tt> contenant une fonction <tt>Strip()</tt> qui enlève tous les espaces d'une chaîne de caractères.
    <br/>Indications:
    <ul>
      <li>On utilisera le type <b><tt>char*</tt></b> pour representer une chaîne de caractères.</li>
      <li>Une chaîne de caractères étant un <b>tableau</b>, on peut le modifier <i>en place</i> dans une fonction. Pas besoin de renvoyer une autre chaîne de caractères.</li>
      <li>Le <i>caractère</i> "espace" (de type <tt>char</tt>) s'écrit avec les guillemets simples: <tt>' '</tt></li>
    </ul>
    <br/><b>Vérifiez</b> votre fonction en téléchargeant <a href="3.2.test.cc" download><tt>3.2.test.cc</tt></a> dans le même repertoire que <tt>3.2.cc</tt> et en le compilant/exécutant.
    <br/><br/><b class="orange">RENDU:</b> <tt>3.2.cc</tt>
    <br/><br/>
  </li>
  <li>
    <b>Écrivez</b> un fichier <tt>3.3.cc</tt> qui <tt>#include "3.2.cc"</tt> et qui contient une fonction <tt>main()</tt> pour que votre programme execute la fonction <tt>Strip</tt> sur
    son premier argument, et l'affiche (avec un saut de ligne à la fin). Donc, si vous faites ça:
    <pre><code class="sh">g++ 3.3.cc
./a.out " Bonjour  madame     la marquise H E L L O    W    ORL D  "</code></pre>
    Vous devez obtenir: <tt>BonjourmadamelamarquiseHELLOWORLD</tt>
    <br/><br/>
    Indications:
    <ul>
      <li>Il va falloir utiliser la fonction <tt>main()</tt> standard, et non sa version abrégée comme on a fait jusque-là: <tt>int main(int argc, char** argv)</tt></li>
      <li>Le premier argument de votre programme sera stocké dans <tt>argv[1]</tt>, qui est modifiable.</li>
    </ul>
    <br/><b class="orange">RENDU:</b> <tt>3.3.cc</tt>
    <br/><br/>
  </li>
</ol>

<hr/>
<footer>
Auto-évaluation: D'abord, créez l'archive <tt>td2.tar</tt> (voir instructions ci-dessous).
<br/>Ensuite: clic droit sur <a href="g.tar.xz" download>g.tar.xz</a>, "Sauvegardez sous". Puis, dans un terminal:<pre><code>
tar xf g.tar.xz
cd grade
bash grade.sh ../td2.tar
</code></pre>

N'oubliez pas de soumettre votre travail sur <a href="http://moodlesupd.script.univ-paris-diderot.fr/course/view.php?id=3707" title="Moodle">Moodle</a>
après l'avoir testé grâce au script : <a href="test.sh" title="Script de test de l'archive de rendu"><tt>test.sh</tt></a>
(voyez <a href="../rendu.html" title="Procédure de rendu">la procédure de rendu</a>).
</footer>
</body>
</html>
