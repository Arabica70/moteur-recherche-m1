<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
  <title>C++: TD 9</title>
  <style type="text/css">
    .blue { color: #0000ff }
    .xslt { color: #116611 }
    .cc { color: #116611 }
    .html { color: #882222 }
    .xml { color: #116611 }
    .red { color: #ff0000 }
    .orange { color: #ff8800 }
    .pink { color: #ff00ff }
    .grey { color: #555555 }
    .hidden { color: #ffffff }
    .bigsep { width: 50px }
    .verticalline { border-left: solid #000000; }
    .framed { border: solid #000000; }
    pre { color: #116611 }
    tt { color: #116611 }
  </style>
  <!-- Google Analytics -->
  <script type="text/javascript" async="" src="http://www.google-analytics.com/ga.js"></script>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-20097933-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
  </script>
  <!-- Syntax highlighting -->
  <link type="text/css" rel="stylesheet" href="../../highlight/styles/googlecode.css">
  <script type="text/javascript" src="../../highlight/highlight.pack.js"></script>
  <script type="text/javascript">hljs.initHighlightingOnLoad();</script>
</head>
<body>
<h2>TD 9 C++: héritage, RGB</h2>

<h3>Rappels</h3>
<ul>
<li><a href="../cours">Page du Cours</a></li>
  <li><a href="../rendu.html">Procédure de rendu</a></li>
  <li><b class="red">Pour vérifier le rendu de ce TD</b>: <a href="test.sh" download><tt>test.sh</tt></a> 
</ul>

<hr/>
<h3>Exercice 1: héritage</h3>
<ol>
  <li>
    <b>Implémentez</b> dans un fichier <tt>1.1.cc</tt> la classe <tt>Pixel</tt>
    déclarée ci-dessous (télécharger: <a href="1.1.h" download>1.1.h</a>, ne le modifiez pas!):
      <pre><code class="c++">class Pixel {
 public:
  Pixel(int x, int y);

  int X() const;
  int Y() const;

  // Prints "INVALID" if the pixel is not valid, otherwise prints "(x, y)".
  void DebugPrint() const;

 protected:
  // A valid pixel is a pixel with non-negative coordinates.
  bool IsValid() const;

 private:
  const int x_;
  const int y_;
};</code></pre>
    <b>Testez</b> votre code avec:
    <pre>rm 1.tar.gz; wget --no-cache http://fabien.viger.free.fr/cpp/td9/1.tar.gz &amp;&amp; tar xf 1.tar.gz
make 1.1</pre>
    <b class="orange">RENDU:</b> <tt>1.1.cc</tt>
    <br/><br/>
  </li>
  <li>
    <b>Copiez</b> <tt>1.1.h</tt> et <tt>1.1.cc</tt> dans des fichiers
    <tt>1.2.h</tt> et <tt>1.2.cc</tt>.
    <br/><b>Ajoutez</b> en bas de <tt>1.2.h</tt> le code suivant:
    <pre><code class="c++">class ColoredPixel : public Pixel {
 public:
  ColoredPixel(int x, int y, int color_rgb);

  int ColorRgb() const;
  
  // Like before, but we also print the color like this:
  // (4, 3, 0xff0080) -&gt; "(4, 3, R255:G0:B128)"
  void DebugPrint() const;

  // We inherit Pixel::IsValid() and don't change it. We don't do more checks.

 private:
  const int color_rgb_;
};</code></pre>
    <b>Implémentez</b> cette classe en bas de <tt>1.2.cc</tt>
    <br/><br/><b>Indications</b>
    <ul>
      <li>
        Le terme <tt>0xff0080</tt> utilisée dans mon exemple correspond à
        l'<a href="https://fr.wikipedia.org/wiki/Syst%C3%A8me_hexad%C3%A9cimal">écriture hexadécimale</a>,
        en base 16, qui est très facile à traduire en binaire:
        <br/>
        <tt>0x0</tt> = 0000b,
        <tt>0x1</tt> = 0001b,
        <tt>0x2</tt> = 0010b,
        <tt>0x3</tt> = 0011b,
        <tt>0x4</tt> = 0100b,
        <tt>0x5</tt> = 0101b,
        <tt>0x6</tt> = 0110b,
        <tt>0x7</tt> = 0111b,
        <tt>0x8</tt> = 1000b,
        <tt>0x9</tt> = 1001b,
        <tt>0xA</tt> = 1010b,
        <tt>0xB</tt> = 1011b,
        <tt>0xC</tt> = 1100b,
        <tt>0xD</tt> = 1101b,
        <tt>0xE</tt> = 1110b,
        <tt>0xF</tt> = 1111b,
        <br/>Et du coup: <tt>0x3e5</tt> = 0011 1110 0101 = 001111100101 en binaire.
      </li>
      <li>
        La décomposition RGB d'un entier est un grand classique en imagerie:
        <br/>Si on regarde les bits d'un entier qui représente une couleur RGB, ses 24 derniers bits sont 
        <tt>rrrrrrrrggggggggbbbbbbbb</tt> :
        <ul>
          <li>La composante R (Red) correspond aux bits 16..23</li>
          <li>La composante G (Green) correspond aux bits 8..15</li>
          <li>La composante B (Blue) correspond aux bits 0..7</li>
        </ul>
      </li>
      <li>
        Pour extraire un sous-bloc des bits d'un entier, on peut utiliser les opérations <tt>&gt;&gt;</tt> et <tt>&amp;</tt> :
        <ul>
          <li><tt>&gt;&gt;</tt>: décalage à droite. <tt>x &gt;&gt; 7 == x * 2<sup>7</sup></tt></li>
          <li><tt>&amp;</tt>: le ET bit-à-bit (à différencier du ET booléen <tt>&amp;&amp;</tt> !!): <tt>x &amp; 3 ==</tt> les deux derniers bits de x (car 3 = 11 en binaire).
          </li>
        </ul>
        <b>Par exemple</b>, pour extraire les bits 11..15 d'un entier x on peut faire:
        <tt>(x &gt;&gt; 11) &amp; 0x1F</tt> car <tt>0x1F == 11111</tt> en binaire (== 31 en décimal).
      </li>
    </ul>
    <br/><b>Testez</b> votre code avec:
    <pre>make 1.2</pre>
    <b class="orange">RENDU:</b> <tt>1.2.cc</tt>
    <br/><br/>
  </li>
  <li>
    Regardez le code suivant (télécharger: <a href="1.3.test.cc" download>1.3.test.cc</a>):
    <pre><code class="c++">#include "1.2.h"

void ApplyDebugPrintTo(const Pixel* p) {
  p-&gt;DebugPrint();
}

int main() {
  ColoredPixel colored_pix(1, 2, 0x334455);

  ApplyDebugPrintTo(&amp;colored_pix);

  colored_pix.DebugPrint();

  ((const Pixel*)(&amp;colored_pix))-&gt;DebugPrint();

  Pixel p = colored_pix;
  p.DebugPrint();
}</code></pre>
    <b>Faites-le tourner:</b> <pre>make 1.3.test
./1.3.test</pre>
    <b>Modifiez</b> <tt>1.2.h</tt> <b class="red">sans toucher</b> à <tt>1.2.cc</tt> pour que les 3 premières lignes soient comme la deuxième.
    <br/><b>Vérifiez</b> que le 1.2 marche encore: <pre>make 1.2</pre>
    <b class="orange">RENDU:</b> <tt>1.2.h</tt> modifié
    <br/><br/>
  </li>
  <li>
    <b>Copiez</b> <tt>1.2.h</tt> et <tt>1.2.cc</tt> dans <tt>1.4.h</tt> et <tt>1.4.cc</tt>,
    et ré-implémentez la classe <tt>ColoredPixel</tt> en utilisant la <i>composition</i>:
    on aura un membre privé <tt>Pixel pixel_;</tt> au lieu d'hériter de la classe <tt>Pixel</tt>
    <br/><br/><b>Vérifiez</b> tout seuls, comme des grands:
    <ul>
      <li>En copiant <tt>1.2.test.cc</tt> dans <tt>1.4.test.cc</tt>
        <ul><li>Et en y <b>changeant rien</b> à part le: <tt>#include "1.<span class="red">2</span>.h"</tt></li></ul>
      </li>
      <li>En copiant <tt>1.2.test.sh</tt> dans <tt>1.4.test.sh</tt>
        <ul>
          <li>Et en y <b>changeant rien</b> à part la référence à <tt>1.<span class="red">2</span>.test</tt></li>
          <li>Et en n'oubliant pas de le rendre éxécutable (<tt>chmod +x 1.4.test.sh</tt>)</li>
        </ul>
      </li>
      <li>Et en ajoutant des entrées pour le <tt>1.4</tt> dans le <tt>Makefile</tt>.</li>
      <li>La commande suivante doit marcher et faire tourner votre code:
        <pre>make 1.4</pre>
      </li>
    </ul>
    <b class="orange">RENDU:</b> <tt>1.4.h</tt>, <tt>1.4.cc</tt>, <tt>1.4.test.cc</tt>, et le <tt>Makefile</tt> modifié.
    <br/><br/>
  </li>
</ol>

<hr/>
<h3>Exercice 2: <tt>public</tt>, <tt>private</tt>, <tt>protected</tt></h3>
<ol>
  <li>
    <b>Entrez</b> dans un fichier <tt>2.1.txt</tt> la liste des fonctions F<b class="pink">X</b>
    qui ne compilent pas dans le code ci-dessous (sur 2 colonnes),
    en tant que simples nombres séparés par des virgules.
    <br/>
    <br/>
    <table summary="screenshot d'un code à examiner">
      <tr>
        <td style="vertical-align:top"><img height="360" src="2.1.1.png" alt="screenshot d'un code à examiner: colonne de gauche"/></td>
        <td style="vertical-align:top"><img height="540" src="2.1.2.png" alt="screenshot d'un code à examiner: colonne de droite"/></td>
      </tr>
    </table>
    Exemple de contenu de 2.1.txt:
    <pre>1,2,3</pre>
    <b>Vérifiez</b> avec le script <a href="2.1.sh" download>2.1.sh</a>:
    <pre>bash 2.1.sh</pre>
    <b class="orange">RENDU:</b> <tt>2.1.txt</tt>
    <br/><br/>
  </li>
  <li>
    Idem ici. Les nombres que vous entrez dans <tt>2.2.txt</tt> doivent 
    correspondre aux commentaires à droite des lignes.
    <table summary="screenshot d'un code à examiner">
      <tr>
        <td style="vertical-align:top"><img height="340" src="2.2.1.png" alt="screenshot d'un code à examiner: colonne de gauche"/></td>
        <td style="vertical-align:top"><img height="400" src="2.2.2.png" alt="screenshot d'un code à examiner: colonne de droite"/></td>
      </tr>
    </table>
    <b>Vérifiez</b> avec le script <a href="2.2.sh" download>2.2.sh</a>:
    <pre>bash 2.2.sh</pre>
    <b class="orange">RENDU:</b> <tt>2.2.txt</tt>
    <br/><br/>
  </li>
</ol>

<footer>
N'oubliez pas de soumettre votre travail sur <a href="http://moodlesupd.script.univ-paris-diderot.fr/course/view.php?id=3707" title="Moodle">Moodle</a>
après l'avoir testé grâce au script : <a href="test.sh" title="Script de test de l'archive de rendu"><tt>test.sh</tt></a>
(voyez <a href="../rendu.html" title="Procédure de rendu">la procédure de rendu</a>).
</footer>
</body>
</html>
